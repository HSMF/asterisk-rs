PRELUDE = {
    use super::lex::Token;
    use super::ast::*;

    fn push<T>(mut x: Vec<T>, v: T) -> Vec<T> {
        x.push(v);
        x
    }
}
TARGET = rust
entry = Grammar
type_token = Token

# denotes that the token `Literal` carries data of type `String`
token_Ident = String
token_Literal = String

Grammar: { Spec }
  | Configs Rules { Spec { rules: v1.into_iter().rev().collect(), configs: v0 } }
  | Rules { Spec { rules: v0.into_iter().rev().collect(), configs: Vec::new() } }

Configs: { Vec<(String, String)> }
  | Configs  Config { push(v0, v1) }
  | Config { vec![v0] }

Config: { (String, String) }
  | Ident Equals Ident { (v0, v2) }
  | Ident Equals Literal { (v0, v2) }

Rules: { Vec<Rule> }
  | Rule Rules { push(v1, v0) }
  | { vec![] }

Rule: { Rule }
  | Ident Colon Literal CaseList { Rule {name: v0, typ: v2, expansions: v3} }

CaseList: { Vec<Expansion> }
  | Case CaseList { push(v1, v0) }
  | { vec![] }

Case: { Expansion }
  | Pipe Idents Literal { Expansion {tokens: v1, code: v2} }

Idents: { Vec<String> }
  | Idents Ident { push(v0, v1) }
  | { vec![] }
