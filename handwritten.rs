// handwritten template of what is generated by TARGET=rust

#[derive(Debug)]
enum StateId {
    State1,
}

pub fn parse<I>(input: I) -> Result<T, Error>
where
    I: Iterator<Item = Token>,
{
    let mut tokens = input.peekable();
    let mut state = StateId::State1;
    let mut stack = vec![(
        StateId::State1,
        TokenType::NonTerm(NonTerm::NonTerm_S0),
        StackValue::None,
    )];

    fn goto_A(state: StateId) -> StateId {
        match state {
            _ => StateId::State1,
        }
    }

    loop {
        match state {
            StateId::State1 => match tokens.peek() {
                None => {}
                Some(head @ Token::Int(value)) => {
                    tokens.next();
                    state = StateId::State2;
                    stack.push((state, TokenType::Term(head), StackValue::Term_Int(value)));
                }
                Some(head @ Token::CloseParen) => {
                    let (_, typ, tmp) = stack.pop().unwrap();

                    let v0 = (match (typ, tmp) {
                        (TokenType::NonTerm(NonTerm::NonTerm_B), StackValue::NonTerm_B(v)) => v,
                        _ => return Err(()),
                    });
                }
            },
        }
    }
}
