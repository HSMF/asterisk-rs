// parser generated by asterisk
mod parser;

#[derive(Debug, Clone, PartialEq, Eq)]
pub enum Token {
    OpenParen,
    CloseParen,
    Int(i32),
    Plus,
    Minus,
    Mul,
    Div,
}

fn lex(s: &str) -> Vec<Token> {
    s.chars()
        .map(|ch| match ch {
            '+' => Token::Plus,
            '-' => Token::Minus,
            '*' => Token::Mul,
            '/' => Token::Div,
            '(' => Token::OpenParen,
            ')' => Token::CloseParen,
            '0'..='9' => Token::Int((ch as u8 - b'0') as i32),
            _ => panic!("unexpected char {ch}"),
        })
        .collect()
}

fn case(input: &str, expected: i32) {
    let toks = lex(input);
    let result = parser::parse(toks.into_iter()).unwrap();
    assert_eq!(result, expected, "generated by {input}");
}

fn main() {
    case("11+2", 13);
    case("1+1", 2);
    case("2*(7+1)", 16);
    case("2*7+1", 15);
    case("21/7+5", 8);
    case("(((((((((((((5)))))))))+1))))-10", -4);
    case("1+2+3+4+5+6+7+8+9+10", 55);
}

